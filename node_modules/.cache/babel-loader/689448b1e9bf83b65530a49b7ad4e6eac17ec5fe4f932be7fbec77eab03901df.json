{"ast":null,"code":"const useFunction = () => {\n  const addComment = (tree, commentId, newComment) => {\n    if (!Array.isArray(tree.replies)) {\n      tree.replies = [];\n    }\n    if (tree.id === commentId) {\n      // Add the new comment to the beginning of the replies array\n      tree.replies.unshift(newComment);\n      return tree;\n    }\n\n    // Recursively update the replies of each comment in the tree\n    const updatedReplies = tree.replies.map(com => addComment(com, commentId, newComment));\n\n    // Update the current comment with the updated replies\n    return {\n      ...tree,\n      replies: updatedReplies\n    };\n  };\n  const deleteComment = (tree, commentId) => {\n    if (tree.id === commentId) {\n      return tree.replies.filter(com => com.id !== commentId);\n    }\n\n    // Recursively update the replies of each comment in the tree\n    const updatedReplies = tree.replies.map(com => deleteComment(com, commentId));\n\n    // Update the current comment with the updated replies\n    return {\n      ...tree,\n      replies: updatedReplies\n    };\n  };\n  return {\n    addComment,\n    deleteComment\n  };\n};\nexport default useFunction;","map":{"version":3,"names":["useFunction","addComment","tree","commentId","newComment","Array","isArray","replies","id","unshift","updatedReplies","map","com","deleteComment","filter"],"sources":["C:/Users/ramma/OneDrive/Desktop/nested-react-components/src/useFunction.js"],"sourcesContent":["const useFunction = () => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    const addComment = (tree, commentId, newComment) => {\r\n      if (!Array.isArray(tree.replies)) {\r\n        tree.replies = [];\r\n      }\r\n  \r\n      if (tree.id === commentId) {\r\n        // Add the new comment to the beginning of the replies array\r\n        tree.replies.unshift(newComment);\r\n        return tree;\r\n      }\r\n  \r\n      // Recursively update the replies of each comment in the tree\r\n      const updatedReplies = tree.replies.map(com =>\r\n        addComment(com, commentId, newComment)\r\n      );\r\n  \r\n      // Update the current comment with the updated replies\r\n      return { ...tree, replies: updatedReplies };\r\n    };\r\n\r\n\r\n    const deleteComment =(tree, commentId)=>{\r\n\r\n        if(tree.id === commentId){\r\n           return tree.replies.filter(com => com.id !== commentId);\r\n        }\r\n\r\n         // Recursively update the replies of each comment in the tree\r\n      const updatedReplies = tree.replies.map(com =>\r\n        deleteComment(com, commentId)\r\n      );\r\n  \r\n      // Update the current comment with the updated replies\r\n      return { ...tree, replies: updatedReplies };\r\n\r\n    }\r\n\r\n    return { addComment , deleteComment};\r\n  };\r\n  \r\n  export default useFunction;\r\n  "],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAAA,KAAM;EAkBtB,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,KAAK;IAClD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACK,OAAO,CAAC,EAAE;MAChCL,IAAI,CAACK,OAAO,GAAG,EAAE;IACnB;IAEA,IAAIL,IAAI,CAACM,EAAE,KAAKL,SAAS,EAAE;MACzB;MACAD,IAAI,CAACK,OAAO,CAACE,OAAO,CAACL,UAAU,CAAC;MAChC,OAAOF,IAAI;IACb;;IAEA;IACA,MAAMQ,cAAc,GAAGR,IAAI,CAACK,OAAO,CAACI,GAAG,CAACC,GAAG,IACzCX,UAAU,CAACW,GAAG,EAAET,SAAS,EAAEC,UAAU,CACvC,CAAC;;IAED;IACA,OAAO;MAAE,GAAGF,IAAI;MAAEK,OAAO,EAAEG;IAAe,CAAC;EAC7C,CAAC;EAGD,MAAMG,aAAa,GAAEA,CAACX,IAAI,EAAEC,SAAS,KAAG;IAEpC,IAAGD,IAAI,CAACM,EAAE,KAAKL,SAAS,EAAC;MACtB,OAAOD,IAAI,CAACK,OAAO,CAACO,MAAM,CAACF,GAAG,IAAIA,GAAG,CAACJ,EAAE,KAAKL,SAAS,CAAC;IAC1D;;IAEC;IACH,MAAMO,cAAc,GAAGR,IAAI,CAACK,OAAO,CAACI,GAAG,CAACC,GAAG,IACzCC,aAAa,CAACD,GAAG,EAAET,SAAS,CAC9B,CAAC;;IAED;IACA,OAAO;MAAE,GAAGD,IAAI;MAAEK,OAAO,EAAEG;IAAe,CAAC;EAE7C,CAAC;EAED,OAAO;IAAET,UAAU;IAAGY;EAAa,CAAC;AACtC,CAAC;AAED,eAAeb,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}