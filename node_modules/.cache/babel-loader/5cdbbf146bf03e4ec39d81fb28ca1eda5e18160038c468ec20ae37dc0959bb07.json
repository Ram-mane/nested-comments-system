{"ast":null,"code":"const useFunction = () => {\n  const addComment = async (tree, commentId, newComment) => {\n    try {\n      const response = await fetch(`http://localhost:7878/api/post/1/comment/${commentId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newComment\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add comment');\n      }\n\n      // If comment added successfully, update the local tree with the new comment\n      const updatedComment = await response.json();\n      const updatedTree = addCommentToLocalTree(tree, commentId, updatedComment); // Update local tree\n      return updatedTree; // Return the updated tree\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      return tree; // Return the original tree if an error occurs\n    }\n  };\n\n  const addCommentToLocalTree = (tree, commentId, newComment) => {\n    if (!Array.isArray(tree.replies)) {\n      tree.replies = [];\n    }\n    if (tree.id === commentId) {\n      // Add the new comment to the beginning of the replies array\n      tree.replies.unshift(newComment);\n      return tree;\n    }\n\n    // Recursively update the replies of each comment in the tree\n    const updatedReplies = tree.replies.map(com => addCommentToLocalTree(com, commentId, newComment));\n\n    // Update the current comment with the updated replies\n    return {\n      ...tree,\n      replies: updatedReplies\n    };\n  };\n  const deleteComment = async commentId => {\n    try {\n      const response = await fetch(`http://localhost:7878/api/comments/${commentId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete comment');\n      }\n      // Return true to indicate successful deletion\n      return true;\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      // Return false or handle the error as needed\n      return false;\n    }\n  };\n  return {\n    addComment,\n    deleteComment\n  };\n};\nexport default useFunction;","map":{"version":3,"names":["useFunction","addComment","tree","commentId","newComment","response","fetch","method","headers","body","JSON","stringify","content","ok","Error","updatedComment","json","updatedTree","addCommentToLocalTree","error","console","Array","isArray","replies","id","unshift","updatedReplies","map","com","deleteComment"],"sources":["C:/Users/ramma/OneDrive/Desktop/nested-react-components/src/useFunction.js"],"sourcesContent":["const useFunction = () => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const addComment = async (tree, commentId, newComment) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:7878/api/post/1/comment/${commentId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ content: newComment }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to add comment');\r\n      }\r\n      \r\n      // If comment added successfully, update the local tree with the new comment\r\n      const updatedComment = await response.json();\r\n      const updatedTree = addCommentToLocalTree(tree, commentId, updatedComment); // Update local tree\r\n      return updatedTree; // Return the updated tree\r\n    } catch (error) {\r\n      console.error('Error adding comment:', error);\r\n      return tree; // Return the original tree if an error occurs\r\n    }\r\n  };\r\n\r\n  const addCommentToLocalTree = (tree, commentId, newComment) => {\r\n    if (!Array.isArray(tree.replies)) {\r\n      tree.replies = [];\r\n    }\r\n\r\n    if (tree.id === commentId) {\r\n      // Add the new comment to the beginning of the replies array\r\n      tree.replies.unshift(newComment);\r\n      return tree;\r\n    }\r\n\r\n    // Recursively update the replies of each comment in the tree\r\n    const updatedReplies = tree.replies.map(com =>\r\n      addCommentToLocalTree(com, commentId, newComment)\r\n    );\r\n\r\n    // Update the current comment with the updated replies\r\n    return { ...tree, replies: updatedReplies };\r\n  };\r\n\r\n\r\n\r\n  const deleteComment = async (commentId) => {\r\n    try {\r\n        const response = await fetch(`http://localhost:7878/api/comments/${commentId}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Failed to delete comment');\r\n        }\r\n        // Return true to indicate successful deletion\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error deleting comment:', error);\r\n        // Return false or handle the error as needed\r\n        return false;\r\n    }\r\n};\r\n\r\n    return { addComment , deleteComment};\r\n  };\r\n  \r\n  export default useFunction;\r\n  "],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAAA,KAAM;EAOxB,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,SAAS,EAAEC,UAAU,KAAK;IACxD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2CH,SAAU,EAAC,EAAE;QACpFI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAER;QAAW,CAAC;MAC9C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;;MAEA;MACA,MAAMC,cAAc,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAC5C,MAAMC,WAAW,GAAGC,qBAAqB,CAAChB,IAAI,EAAEC,SAAS,EAAEY,cAAc,CAAC,CAAC,CAAC;MAC5E,OAAOE,WAAW,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAOjB,IAAI,CAAC,CAAC;IACf;EACF,CAAC;;EAED,MAAMgB,qBAAqB,GAAGA,CAAChB,IAAI,EAAEC,SAAS,EAAEC,UAAU,KAAK;IAC7D,IAAI,CAACiB,KAAK,CAACC,OAAO,CAACpB,IAAI,CAACqB,OAAO,CAAC,EAAE;MAChCrB,IAAI,CAACqB,OAAO,GAAG,EAAE;IACnB;IAEA,IAAIrB,IAAI,CAACsB,EAAE,KAAKrB,SAAS,EAAE;MACzB;MACAD,IAAI,CAACqB,OAAO,CAACE,OAAO,CAACrB,UAAU,CAAC;MAChC,OAAOF,IAAI;IACb;;IAEA;IACA,MAAMwB,cAAc,GAAGxB,IAAI,CAACqB,OAAO,CAACI,GAAG,CAACC,GAAG,IACzCV,qBAAqB,CAACU,GAAG,EAAEzB,SAAS,EAAEC,UAAU,CAClD,CAAC;;IAED;IACA,OAAO;MAAE,GAAGF,IAAI;MAAEqB,OAAO,EAAEG;IAAe,CAAC;EAC7C,CAAC;EAID,MAAMG,aAAa,GAAG,MAAO1B,SAAS,IAAK;IACzC,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCH,SAAU,EAAC,EAAE;QAC5EI,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACF,QAAQ,CAACQ,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MACA;MACA,OAAO,IAAI;IACf,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C;MACA,OAAO,KAAK;IAChB;EACJ,CAAC;EAEG,OAAO;IAAElB,UAAU;IAAG4B;EAAa,CAAC;AACtC,CAAC;AAED,eAAe7B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}